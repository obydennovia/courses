/**
* Вам дан список ролей и сценарий пьесы в виде массива строчек.
*
* Каждая строчка сценария пьесы дана в следующем виде:
* Роль: текст
*
* Текст может содержать любые символы.
*
* Напишите метод, который будет группировать строчки по ролям, пронумеровывать
* их и возвращать результат в виде готового текста (см. пример). Каждая группа
* распечатывается в следующем виде:
*
* Роль:
* i) текст
* j) текст2
* ...
* ==перевод строки==
*
* i и j -- номера строк в сценарии. Индексация строчек начинается с единицы,
* выводить группы следует в соответствии с порядком ролей. Переводы строк между
* группами обязательны, переводы строк в конце текста не учитываются.
*
* Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10
* ролей – соответственно, неправильная сборка результирующей строчки может
* выйти за ограничение по времени.
*
* Обратите внимание еще на несколько нюансов:
* - имя персонажа может встречаться в строке более одного раза, в том числе с
*   двоеточием;
* - название одной роли может быть префиксом названия другой роли (например,
*   "Лука" и "Лука Лукич");
* - роль, у которой нет реплик, тоже должна присутствовать в выходном файле;
* - в качестве перевода строки надо использовать символ '\n' (перевод строки в
*   стиле UNIX);
* - будьте внимательны, не добавляйте лишних пробелов в конце строк.
*/

public static String printTextPerRole(String[] roles, String[] textLines) {
    StringBuilder result = new StringBuilder();

    // перебираем массив ролей
    for (int i=0; i<roles.length; i++) {
        // переходим на новую строку с новой ролью, если роль не первая в списке
        if (i>0) {
            result.append("\n");
            result.append(roles[i] + ":");
        }
        // не переходим на новую строку, если роль первая в списке
        else {
            result.append(roles[i] + ":");
        }

        // перебираем массив реплик
        for (int j=0; j<textLines.length; j++) {
            if (textLines[j].startsWith(roles[i] + ":")) { // проверяем, начинается ли строка с указанной роли с двоеточием
                result.append("\n"); // реплика с новой строки
                result.append(j+1 + ")" + textLines[j].replaceFirst(roles[i] + ":", "")); // формируем реплику согласно условию
            }
        }

        // если роль не последняя, то после всех ее реплик переходим на новую строку
        if (i < (roles.length - 1)) {
            result.append("\n");
        }
    }

    return result.toString(); // возвращаем результат
}
